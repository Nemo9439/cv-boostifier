{"version":3,"sources":["themes/Sql/Sql.helper.ts","themes/Sql/terminal.js","themes/Sql/Sql.tsx"],"names":["createDb","alasql","resume","db","Database","Object","keys","forEach","table","sql","obj","Array","isArray","fields","dbTableName","length","fieldsStr","map","field","join","exec","tables","data","module","exports","terminalBeep","firstPrompt","promptInput","terminalObj","message","PROMPT_TYPE","callback","shouldDisplayInput","inputField","document","createElement","historyIndex","showHistoryInput","history","from","html","querySelectorAll","reverse","_inputLine","textContent","value","innerText","style","position","zIndex","outline","border","opacity","fontSize","_input","display","appendChild","fireCursorInterval","cursor","_cursor","setTimeout","parentElement","_shouldBlinkCursor","visibility","print","onblur","onfocus","onclick","focus","onkeydown","e","which","preventDefault","onkeyup","inputValue","removeChild","toUpperCase","code","id","source","innerHTML","volume","this","className","_innerWindow","_output","classList","add","beep","load","play","isHTML","type","newLine","input","password","confirm","clear","sleep","milliseconds","setTextSize","size","setTextColor","col","color","background","setBackgroundColor","setWidth","width","setHeight","height","blinkingCursor","bool","toString","fontFamily","margin","padding","SqlTheme","props","profile","termWrapper","useRef","getElementById","profileDb","terminal","Terminal","processCommand","command","a","Promise","resolve","reject","res","AsciiTable","toLowerCase","current","key","addRow","split","hasBackslahG","indexOf","console","log","substr","i","output","row","k","repeat","Math","max","setHeading","apply","values","val","error","useEffect","name","basics","term","welcomeMessage","children","inputLoop","trim","then","catch","err","ref"],"mappings":"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","file":"static/js/3.32ed812d.chunk.js","sourcesContent":["export const createDb = (alasql: any, resume: any) => {\n  const db = new alasql.Database();\n  Object.keys(resume).forEach(table => {\n    let sql: string;\n    const obj = Array.isArray(resume[table]) ? resume[table][0] : resume[table];\n    const fields = obj && Object.keys(obj);\n    const dbTableName = table === 'references' ? 'refs' : table;\n    if (fields && fields.length) {\n      const fieldsStr = fields.map(field => `${field} string`).join(', ');\n      sql  = `CREATE TABLE ${dbTableName} (${fieldsStr})`;\n    } else {\n      sql  = `CREATE TABLE ${dbTableName} (_ string)`;\n    }\n    db.exec(sql);\n    db.tables[dbTableName].data = Array.isArray(resume[table]) ? resume[table] : [resume[table]];\n  });\n\n  return db;\n};\n","/*! terminal.js v2.0 | (c) 2014 Erik Ã–sterberg | https://github.com/eosterberg/terminaljs */\n\nmodule.exports = (function () {\n  // PROMPT_TYPE\n  var PROMPT_INPUT = 1, PROMPT_PASSWORD = 2, PROMPT_CONFIRM = 3\n\n  var fireCursorInterval = function (inputField, terminalObj) {\n    var cursor = terminalObj._cursor\n    setTimeout(function () {\n      if (inputField.parentElement && terminalObj._shouldBlinkCursor) {\n        cursor.style.visibility = cursor.style.visibility === 'visible' ? 'hidden' : 'visible'\n        fireCursorInterval(inputField, terminalObj)\n      } else {\n        cursor.style.visibility = 'visible'\n      }\n    }, 500)\n  }\n\n\n\n  var firstPrompt = true;\n  var promptInput = function (terminalObj, message, PROMPT_TYPE, callback) {\n    var shouldDisplayInput = (PROMPT_TYPE === PROMPT_INPUT)\n    var inputField = document.createElement('input')\n    var historyIndex = -1;\n    var showHistoryInput = () => {\n      const history = Array.from(terminalObj.html.querySelectorAll('.user-input')).reverse();\n      if (historyIndex >= history.length) {\n        historyIndex = history.length -1;\n      }\n      if (historyIndex < 0) {\n        historyIndex = -1;\n      }\n      if (historyIndex === -1) {\n        terminalObj._inputLine.textContent = inputField.value = '';\n      } else {\n        history[historyIndex] && (terminalObj._inputLine.textContent = inputField.value = history[historyIndex].innerText);\n      }\n    };\n    inputField.style.position = 'absolute'\n    inputField.style.zIndex = '-100'\n    inputField.style.outline = 'none'\n    inputField.style.border = 'none'\n    inputField.style.opacity = '0'\n    inputField.style.fontSize = '0.2em'\n\n    terminalObj._inputLine.textContent = ''\n    terminalObj._input.style.display = 'block'\n    terminalObj.html.appendChild(inputField)\n    fireCursorInterval(inputField, terminalObj)\n\n    if (message.length) terminalObj.print(PROMPT_TYPE === PROMPT_CONFIRM ? message + ' (y/n)' : message)\n\n    inputField.onblur = function () {\n      terminalObj._cursor.style.display = 'none'\n    }\n\n    inputField.onfocus = function () {\n      inputField.value = terminalObj._inputLine.textContent\n      terminalObj._cursor.style.display = 'inline'\n    }\n\n    terminalObj.html.onclick = function () {\n      inputField.focus()\n    }\n\n    inputField.onkeydown = function (e) {\n      if (e.which === 37 || e.which === 39 || e.which === 38 || e.which === 40 || e.which === 9) {\n        e.preventDefault()\n      } else if (shouldDisplayInput && e.which !== 13) {\n        setTimeout(function () {\n          terminalObj._inputLine.textContent = inputField.value\n        }, 1)\n      }\n    }\n    inputField.onkeyup = function (e) {\n      if (PROMPT_TYPE === PROMPT_CONFIRM || e.which === 13) {\n        terminalObj._input.style.display = 'none'\n        var inputValue = inputField.value\n        if (shouldDisplayInput) terminalObj.print(inputValue, false, 'user-input')\n        terminalObj.html.removeChild(inputField)\n        if (typeof(callback) === 'function') {\n          if (PROMPT_TYPE === PROMPT_CONFIRM) {\n            callback(inputValue.toUpperCase()[0] === 'Y' ? true : false)\n          } else callback(inputValue)\n        }\n      } else if (e.code === 'ArrowUp') {\n        historyIndex++;\n        showHistoryInput();\n      } else if (e.code === 'ArrowDown') {\n        historyIndex--;\n        showHistoryInput();\n      }\n    }\n    if (firstPrompt) {\n      firstPrompt = false\n      setTimeout(function () { inputField.focus()\t}, 50)\n    } else {\n      inputField.focus()\n    }\n  }\n\n  var terminalBeep\n\n  var TerminalConstructor = function (id) {\n    if (!terminalBeep) {\n      terminalBeep = document.createElement('audio')\n      var source = '<source src=\"//www.erikosterberg.com/terminaljs/beep.'\n      terminalBeep.innerHTML = source + 'mp3\" type=\"audio/mpeg\">' + source + 'ogg\" type=\"audio/ogg\">'\n      terminalBeep.volume = 0.05\n    }\n\n    this.html = document.createElement('div')\n    this.html.className = 'Terminal'\n    if (typeof(id) === 'string') { this.html.id = id }\n\n    this._innerWindow = document.createElement('div')\n    this._output = document.createElement('p')\n    this._inputLine = document.createElement('span') //the span element where the users input is put\n    this._cursor = document.createElement('span')\n    this._input = document.createElement('p') //the full element administering the user input, including cursor\n    this._input.classList.add('input-line')\n\n    this._shouldBlinkCursor = true\n\n    this.beep = function () {\n      terminalBeep.load()\n      terminalBeep.play()\n    }\n\n    this.print = function (message, isHTML, type) {\n      var newLine = document.createElement('div')\n      type && newLine.classList.add(type);\n      if (isHTML) {\n        newLine.innerHTML = message\n      } else {\n        newLine.textContent = message\n      }\n      this._output.appendChild(newLine)\n    }\n\n    this.input = function (message, callback) {\n      promptInput(this, message, PROMPT_INPUT, callback)\n    }\n\n    this.password = function (message, callback) {\n      promptInput(this, message, PROMPT_PASSWORD, callback)\n    }\n\n    this.confirm = function (message, callback) {\n      promptInput(this, message, PROMPT_CONFIRM, callback)\n    }\n\n    this.clear = function () {\n      this._output.innerHTML = ''\n    }\n\n    this.sleep = function (milliseconds, callback) {\n      setTimeout(callback, milliseconds)\n    }\n\n    this.setTextSize = function (size) {\n      this._output.style.fontSize = size\n      this._input.style.fontSize = size\n    }\n\n    this.setTextColor = function (col) {\n      this.html.style.color = col\n      this._cursor.style.background = col\n    }\n\n    this.setBackgroundColor = function (col) {\n      this.html.style.background = col\n    }\n\n    this.setWidth = function (width) {\n      this.html.style.width = width\n    }\n\n    this.setHeight = function (height) {\n      this.html.style.height = height\n    }\n\n    this.blinkingCursor = function (bool) {\n      bool = bool.toString().toUpperCase()\n      this._shouldBlinkCursor = (bool === 'TRUE' || bool === '1' || bool === 'YES')\n    }\n\n    this._input.appendChild(this._inputLine)\n    this._input.appendChild(this._cursor)\n    this._innerWindow.appendChild(this._output)\n    this._innerWindow.appendChild(this._input)\n    this.html.appendChild(this._innerWindow)\n\n    this.setBackgroundColor('black')\n    this.setTextColor('white')\n    this.setTextSize('1em')\n    this.setWidth('100%')\n    this.setHeight('100%')\n\n    this.html.style.fontFamily = 'Monaco, Courier'\n    this.html.style.margin = '0'\n    this._innerWindow.style.padding = '10px'\n    this._input.style.margin = '0'\n    this._output.style.margin = '0'\n    this._cursor.style.background = 'white'\n    this._cursor.innerHTML = 'C' //put something in the cursor..\n    this._cursor.style.display = 'none' //then hide it\n    this._input.style.display = 'none'\n  }\n\n  return TerminalConstructor\n}())\n","/// <reference path=\"./ascii-table.d.ts\" />\nimport React, {PropsWithChildren, useEffect, useRef} from 'react';\nimport './Sql.scss';\nimport {createDb} from './Sql.helper';\nimport alasql from 'alasql';\nimport AsciiTable from 'ascii-table';\nimport Terminal from './terminal';\nimport {IProfileProps} from '../../models';\n\nexport function SqlTheme(props: PropsWithChildren<IProfileProps>) {\n  const CLEAR = 'clear';\n  const {profile} = props;\n  const termWrapper = useRef(document.getElementById('term-wrapper') as HTMLDivElement);\n  const profileDb = useRef(null as any);\n  const terminal = useRef(new Terminal('termId'));\n  const processCommand = async (command: string) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        try {\n          let res;\n          const table = new AsciiTable();\n          if (!command.length) {\n            resolve('<br>')\n          } else {\n            if (command.toLowerCase() === CLEAR) {\n              resolve(CLEAR);\n            } else if (command.toLowerCase() === 'show tables') {\n              Object.keys(profileDb.current.tables).forEach((key: any) => {\n                table.addRow(key);\n              });\n              resolve(table.toString().split('\\n').join('<br>'));\n            } else if (command.toLowerCase() === 'help') {\n              resolve(`<small>Typing \"show tables\" will print the list of tables.<br>Typing an SQL query will print the results<br>Example: \"select * from education\"</small>`);\n            } else {\n              const hasBackslahG = command.indexOf('\\\\G')\n              console.log(`hasBackslahG = ${hasBackslahG}`)\n              if (hasBackslahG > 0) {\n                command = command.substr(0, hasBackslahG)\n              }\n              res = profileDb.current.exec(command);\n              const keys = Object.keys(res[0]) || ['N/A'];\n\n              if (hasBackslahG > 0) {\n                let i=0;\n                const output = res.map((row:any)=> {\n                  i++;\n                  const h = `*************************** ${i}. row ***************************<br>`\n                  return h+ keys.map((k)=>{\n                    return `${' '.repeat(Math.max(27-k.length,0))}${k}: ${row[k] || 'NULL' }`\n                  }).join('<br>')\n                }).join('<br>')\n                resolve(output);\n              } else {\n                table.setHeading.apply(table, [...keys])\n                res.forEach((row: any) => {\n                  table.addRow.apply(table, Object.values(row)\n                    .map(val => val || 'NULL')\n                    .map(val => typeof val === 'string' ? val.split('\\n').join('') : val));\n                });\n//              console.log(table.toString());\n                resolve(table.toString().split('\\n').join('<br>'));\n              }\n              // console.log(JSON.stringify(res));\n            }\n          }\n        } catch (e) {\n          console.error(e);\n          reject(e);\n        }\n      }, 200)\n    });\n  };\n\n  useEffect(() => {\n    const inputLoop = (term: any) => {\n      term.input('', (command: any) => {\n        processCommand(command.trim()).then(res => {\n          if (res === CLEAR) {\n            term.clear();\n          } else {\n            term.print(res, true);\n          }\n          inputLoop(term);\n        }).catch(err => {\n          console.log(err);\n          term.print(`${command}: command not found or wrong sql syntax`);\n          inputLoop(term);\n        });\n      });\n    };\n\n    profileDb.current = createDb(alasql,profile);\n    const name = profile.basics && profile.basics.name;\n    const term = terminal.current;\n    const welcomeMessage = `Welcome to ${name} Resume SQL terminal! <br><small>Type \"help\" to get help</small><br><br>`;\n    term.clear();\n    (term as any).print(welcomeMessage, true);\n    if (termWrapper.current && !termWrapper.current.children.length) {\n      termWrapper.current.innerHTML = '';\n      termWrapper.current.appendChild(term.html);\n      inputLoop(term);\n    }\n  },[profile]);\n\n  return (\n    <>\n      <div id=\"term-wrapper\" ref={termWrapper}></div>\n    </>\n  )\n}\n"],"sourceRoot":""}
{"version":3,"sources":["themes/CssTyper/CssTyper.tsx"],"names":["CssTyper","props","profile","url","basics","website","setTimeout","styles","name","openComment","writeStyles","message","index","interval","length","pre","document","getElementById","scrollTop","scrollHeight","which","html","styleText","styleTag","innerHTML","replace","writeStyleChar","run","className","id","label","email","href","phone","location","address","summary","work","map","w","ix","key","company","startDate","endDate","position","highlights","h","education","edu","institution","area","studyType","courses","c","skills","s","languages","l","language","lang","fluency"],"mappings":"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","file":"static/js/5.6b800350.chunk.js","sourcesContent":["import React, {PropsWithChildren} from 'react';\nimport './CssTyper.scss';\nimport {IProfileProps, Resume} from '../../models';\n\nexport function CssTyper(props: PropsWithChildren<IProfileProps>) {\n  const {profile} = props;\n  const url = profile.basics?.url || (profile.basics as any).website;\n  setTimeout(() => run(profile), 2000);\n  return (\n    <div className=\"ct-container\">\n      <style id=\"style-tag\">\n      </style>\n      <pre id=\"style-text\"></pre>\n      <div className=\"ct-output\">\n        <header className=\"ct-header-container\">\n          <div className=\"ct-header\">\n            <div className=\"ct-header-name\">{profile.basics?.name}</div>\n            <div className=\"ct-header-label\">{profile.basics?.label}</div>\n          </div>\n        </header>\n        <div className=\"ct-body-container\">\n          <div className=\"ct-body\">\n            <section id=\"contact\">\n              <aside>Contact</aside>\n              <div className=\"ct-section-body\">\n                {profile.basics?.email && <div className=\"ct-detail\">\n                  <div className=\"ct-detail-title\">Email</div>\n                  <div className=\"email\"><a href={'mailto:' + profile.basics?.email}>{profile.basics?.email}</a></div>\n                </div>}\n                {profile.basics?.phone && <div className=\"ct-detail\">\n                  <div className=\"ct-detail-title\">Phone</div>\n                  <div className=\"phone\">{profile.basics?.phone}</div>\n                </div>}\n                {url && <div className=\"ct-detail\">\n                  <div className=\"ct-detail-title\">Website</div>\n                  <div className=\"website\"><a href={url}>{url}</a></div>\n                </div>}\n                {profile.basics?.location?.address && <div className=\"ct-detail\">\n                  <div className=\"ct-detail-title\">Location</div>\n                  <div>{profile.basics?.location?.address}</div>\n                </div>}\n              </div>\n            </section>\n            {profile.basics?.summary && <section id=\"about\">\n              <aside>About</aside>\n              <div className=\"ct-section-body about\">\n                <p>{profile.basics?.summary}</p>\n              </div>\n            </section>}\n            <section id=\"work\">\n              <aside>Work</aside>\n              <div className=\"ct-section-body\">\n                {profile.work?.map((w, ix) => <div className=\"ct-wrapper\" key={ix}>\n                                                    <div className=\"ct-title\">\n                                                      <span>{w.name || (w as any).company}</span>\n                                                      <span className=\"date\">{w.startDate} — {w.endDate || 'Current'}</span>\n                                                    </div>\n                                                    <div className=\"work-details\">\n                                                      <div className=\"position\">{w.position}</div>\n                                                      <div className=\"website\"><a href={w.url || (w as any).website}>{w.url || (w as any).website}</a></div>\n                                                    </div>\n                                                    {w.summary && <div className=\"summary\"><p>{w.summary}</p></div>}\n                                                    {w.highlights && !!w.highlights.length && <div className=\"work-highlights\">\n                                                      <h4>Highlights</h4>\n                                                      <ul className=\"highlights\">\n                                                        {w.highlights?.map(h => <li className=\"bullet\" key={h}>{h}</li>)}\n                                                      </ul>\n                                                    </div>}\n                                                  </div>)\n              }\n              </div>\n            </section>\n            {profile.education && profile.education.length && <section id=\"education\">\n              <aside>Education</aside>\n              <div className=\"ct-section-body\">\n                {profile.education?.map(edu => <div key={edu.startDate} className=\"ct-wrapper\">\n                  <div className=\"ct-title\">\n                    <span>{edu.institution}</span>\n                    <span className=\"date\">{edu.startDate} — {edu.endDate || 'Current'}</span>\n                  </div>\n                  <div className=\"education-details\">\n                    <div className=\"ct-area\">{edu.area}</div>\n                    <div className=\"ct-study-type\">{edu.studyType}</div>\n                  </div>\n                  {edu.courses && !!edu.courses.length && <div className=\"work-highlights\">\n                    <h4>Courses</h4>\n                    <ul className=\"highlights\">\n                      {edu.courses?.map(c => <li key={c} className=\"bullet\">{c}</li>)}\n                    </ul>\n                  </div>}\n                </div>)\n                }\n              </div>\n            </section>}\n\n            <section id=\"skills\">\n              <aside>Skills</aside>\n              <div className=\"ct-section-body-skills\">\n                {profile.skills?.map(s => <div key={s.name} className=\"work-highlights\">\n                  <div className=\"skill\">{s.name}</div>\n                </div>)\n                }\n              </div>\n            </section>\n\n            <section id=\"languages\">\n              <aside>Languages</aside>\n              <div className=\"ct-section-body\">\n                {profile.languages?.map(l => <div key={l.language} className=\"ct-detail\">\n                  <div className=\"ct-detail-title\">{l.language && getLanguage(l.language)}</div>\n                  <div>{l.fluency}</div>\n                </div>)}\n              </div>\n            </section>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction run(profile: Resume) {\n  const styles = `\n/*\n*\n* Hi! It's me, ${profile.basics?.name}\n*\n* I'm styling my CV right now, want to watch?\n*\n*/\n\n\n\n/*\n * Let's start by adding some data\n */\n\n.ct-output {\n    display: block;\n    width: 100%;\n    height: 100%;\n    background: #fff;\n    color: #333;\n    overflow: auto;\n}\n\n/*\n * OK, That's really ugly...\n * let's take care of the header\n */\n\n.ct-header-container {\n    background: #f4f6f6;\n    padding: 50px 0;\n    margin-bottom: 30px;\n    display: flex;\n    justify-content: center;\n}\n\n.ct-header {\n    width: 274px;\n}\n\n.ct-header-name {\n    font-size: 36px;\n}\n\n.ct-header-label {\n    color: #95a5a6;\n    font-size: 24px;\n    white-space: nowrap;\n}\n\n/*\n * That's better. Now let's add some styles to the body\n */\n\n.ct-body {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.ct-body section {\n    width: 500px;\n    position: relative;\n    margin-left: 225px;\n    margin-bottom: 10px;\n}\n\n.ct-section-body {\n    padding-top: 10px;\n}\n\n.ct-detail {\n    padding-bottom: 10px;\n}\n\n.ct-detail-title {\n    font-weight: bold;\n}\n\n.ct-body a {\n    color: #2ecc71;\n}\n\n#contact .ct-section-body {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n}\nsection aside {\n    position: absolute;\n    top: 0px;\n    left: -150px;\n    color: #f1c40f;\n    font-size: 26px;\n    width: 120px;\n    text-align: right;\n}\n\n.about {\n    line-height: 1.8;\n}\n\n.ct-wrapper {\n    margin-bottom: 30px;\n}\n.ct-title {\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid #f4f6f6;\n    height: 20px;\n    margin-top: 12px;\n    margin-bottom: -2px;\n    align-items: center;\n}\n\n.ct-title span:first-child {\n    color: #000;\n    font-weight: bold;\n    font-size: 18px;\n    margin-top: -22px;\n}\n\n.ct-title .date {\n    font-size: 14px;\n    margin-top: -22px;\n}\n\n/*\n * So far so good. Now the work section needs some touch...\n */\n\n.work-details {\n    display: flex;\n    justify-content: space-between;\n}\n\n.work-details .position {\n    font-weight: bold;\n    margin-bottom: 8px;\n}\n\n.work-details .summary {\n    line-height: 1.5;\n}\n\n.work-highlights h4 {\n    font-size: 18px;\n    margin-top: 12px;\n    margin-bottom: 10px;\n}\n\n.highlights {\n    margin-bottom: 10px;\n    padding-inline-start: 40px;\n}\n\n.bullet {\n    line-height: 1.8;\n    list-style: none;\n}\n\n.bullet::before {\n    content: \"●\";\n    float: left;\n    font-size: 15px;\n    margin-top: -4px;\n    margin-left: -19px;\n    opacity: .1;\n    position: absolute;\n}\n\n.ct-area {\n    font-weight: bold;\n}\n\n/*\n *  skills are important, let's make them a bit prettier\n */\n.ct-section-body-skills {\n    display: flex;\n    flex-flow: wrap;\n}\n\n.skill {\n    font-size: 12px;\n    margin-top: 8px;\n    margin-right: 10px;\n    padding: 3px 7px;\n    border: 1px solid #eee;\n    border-radius: 4px;\n    background: #eff9f0;\n    white-space: nowrap;\n}\n\n/*\n *  Much better now, isn't it?\n *\n *\n *  *** This skin was inspired by the awesome work\n *     of Jake Albaugh (https://codepen.io/jakealbaugh)\n */\n\n  `;\n\n  let openComment = false\n\n  const writeStyleChar = (which: string) => {\n    let styleText: any = document.getElementById('style-text');\n    let styleTag: any = document.getElementById('style-tag');\n    if (!styleTag || !styleText) {\n      return;\n    }\n    let html: string;\n    html = styleText.innerHTML;\n    if (which === '/' && !openComment) {\n      openComment = true;\n      html += which;\n    } else if (which === '/' && openComment) {\n      openComment = false;\n      html = html.replace(/(\\/[^/]*\\*)$/, '<em class=\"comment\">$1/</em>');\n    } else if (which === ':') {\n      html = html.replace(/([a-zA-Z- ^\\n]*)$/, '<em class=\"key\">$1</em>:');\n    } else if (which === ';') {\n      html = html.replace(/([^:]*)$/, '<em class=\"value\">$1</em>;');\n    } else if (which === '{') {\n      html = html.replace(/(.*)$/, '<em class=\"selector\">$1</em>{');\n    } else {\n      html += which;\n    }\n    styleText.innerHTML = html;\n    styleTag.innerHTML += which;\n\n    return openComment;\n  }\n\n  const writeStyles = (message: string, index: number, interval: number) => {\n    if (index < message.length) {\n      const pre: any = document.getElementById( 'style-text');\n      if (pre) {\n        pre.scrollTop = pre.scrollHeight;\n        writeStyleChar(message[index++]);\n        setTimeout(() => writeStyles(message, index, interval), interval * (openComment ? 4 : 1));\n      }\n    }\n  }\n\n\n  writeStyles(styles, 0, 15)\n}\n\nfunction getLanguage(lang: string): string {\n  const langMap: {[key: string]: string} = {\n    'en': 'English',\n    'he': 'Hebrew'\n  };\n  return langMap[lang] || lang;\n}\n"],"sourceRoot":""}